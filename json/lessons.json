[
  {
    "_id": {
      "$oid": "6480a6b45299bc01bb788b11"
    },
    "lessonNumber": 1,
    "isPassed": false,
    "content": "\n<h1 class=\"text-center my-5\">Привет!</h1>\n    <p class=\"lead\">\n        Добро пожаловать пробный на курс! На нём ты узнаешь как работает интернет, поймёшь как создаются сайты с\n        помощью\n        JavaScript.\n    </p>\n    <p class=\"lead\">\n        JavaScript – это язык программирования, который используют разработчики для создания интерактивных веб-страниц.\n    </p>\n    <p class=\"lead\">\n        JavaScript позволяет управлять элементами веб-страницы — можно менять свойства и расположение элементов,\n        перемещаться, реагировать на такие события, как движение мыши или нажатие на клавиатуру, и создавать множество\n        других интересных эффектов.\n    </p>\n\n    <p class=\"lead\">\n        Итак создадим простую HTML страницу.\n    </p>\n    <p class=\"lead\">\n    <pre>\n<code class=\"lead\">\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h2&gt;Посчитайте овец&lt;/h2&gt;\n    &lt;div&gt;\n        &lt;h5&gt;Овцы: &lt;span class=\"counter\"&gt;0&lt;/span&gt;&lt;/h5&gt;\n        &lt;button class=\"counter-button\"&gt;+ 1&lt;/button&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code>\n</pre>\n    </p>\n    <p class=\"lead\">\n        Эта страничка создана нами для реализации простого счетчика овец. Каждый раз когда на\n        кнопку нажимают, прибавляется одна овечка.\n    </p>\n    <p class=\"lead\">\n        Но такой функционал не реализовать без JavaScript, поэтому добавим скрипт в конец тега body. Скрипт можно добавлять\n        напрямую в HTML как показано ниже\n    </p>\n    <p class=\"lead\">\n    <pre>\n<code class=\"lead\">\n&lt;script&gt;\n    document.querySelector(\".counter-button\").addEventListener(\"click\", (e) => {\n        document.querySelector(\".counter\").textContent = \"1\"\n    })\n&lt;/script&gt;\n</code>\n</pre>\n    </p>\n    <p class=\"lead\">\n        Итак давайте рассмотрим подробнее пример:\n    </p>\n    <p class=\"lead\">\n        Есть такое понятие как DOM (Document Object Model) - представляет собой объектную модель документа, с помощью\n        которой можно работать с тегами HTML-документа как с деревом объектов, каждый из которых имеет свой уникальный\n        адрес. Иными словами по дому можно ходить используя JavaScript и менять элементы HTML документа. Каждый HTML-тег\n        является объектом. Вложенные теги являются «детьми» родительского элемента. Текст, который находится внутри тега,\n        также является объектом.\n    </p>\n    <p class=\"lead\">\n        Для того чтобы найти какой-то элемент в DOM есть несколько методов поиска:\n    </p>\n    <p class=\"lead\">\n    <pre>\n            <code class=\"lead\">\ndocument.querySelector(selector);\ndocument.getElementById(id);\ndocument.getElementByTagName(tag);\ndocument.getElementsByClassName(class)\n    </code>\n    </pre>\n    </p>\n    <p class=\"lead\">\n        Вернемся к нашему коду:\n    </p>\n    <p class=\"lead\">\n        В нашем дереве DOM есть заголовок h5 и тег span с классом .counter, в котором мы считаем овечек, соответственно\n        обратиться к элементу span нам нужно через какой-то поисковый метод:\n    </p>\n    <p class=\"lead\">\n    <pre><code class=\"lead\">document.querySelector(\".counter\").textContent = \"1\"</code></pre>\n    </p>\n    <p class=\"lead\">\n        Используя textContent можно менять текст внутри тега.\n    </p>\n    <p class=\"lead\">\n        Заметьте, что мы используем метод поиска querySelector, а ищем по классу. QuerySelector найдет первый элемент с\n        таким классом, если же мы хотим найти к примеру элемент с определенным id, то тогда надо будет перед id написать #.\n        К примеру document.querySelector(”#your-id”). Можно осуществлять поиск и по названию тега.\n        И теперь понятно как обратиться к кнопке, но как сделать так, чтобы именно при нажатии срабатывало изменение. Для\n        этого, как вы уже наверное заметили, мы используем слушатель событий, а точнее addEventListener\n    </p>\n    <p class=\"lead\">\n    <pre><code class=\"lead\">document.querySelector(\".counter-button\").addEventListener(\"click\", (e) => {\n        document.querySelector(\".counter\").textContent = \"1\"\n        })</code></pre>\n    </p>\n    <p class=\"lead\">\n        Давайте разберем как работает слушатель событий. В браузере есть множество разных событий, такие как:\n    </p>\n    <p class=\"lead\">\n    <pre class=\"lead\">\n        click – происходит, когда кликнули на элемент левой кнопкой мыши.\n        contextmenu – происходит, когда кликнули на элемент правой кнопкой мыши.\n        mouseover / mouseout – когда мышь наводится на / покидает элемент.\n        mousedown / mouseup – когда нажали / отжали кнопку мыши на элементе.\n        mousemove – при движении мыши.\n        </pre>\n    </p>\n    <p class=\"lead\">\n        Чтобы отслеживать событие и существует слушатель событий. На одно событие с помощью event listener можно повесить\n        несколько обработчиков.\n    </p>\n    <p class=\"lead\">\n        Давайте теперь посмотрим на наш код и попробуем разобрать его целиком\n    </p>\n    <p class=\"lead\">\n    <pre><code class=\"lead\">\n            document.querySelector(\".counter-button\").addEventListener(\"click\", () => {\n            document.querySelector(\".counter\").textContent = \"1\"\n        </code></pre>\n    </p>\n    <p class=\"lead\">\n    <pre>\n1) Сначала с помощью метода поиска мы находим кнопку подсчета овечек document.querySelector(\".counter-button\").\n2) С помощью слушателя события мы отслеживаем событие клика этой кнопки addEventListener(\"click\", () => ...\n3) Далее с помощью метода поиска находим тот элемент, в который мы записываем количество овечек\ndocument.querySelector(\".counter\")\n4) И с помощью textContent изменяем текст внутри этого тега document.querySelector(\".counter\").textContent = \"1\"\n        </pre>\n    </p>\n    <p class=\"lead\">\n        Но как вы могли заметить в нашем скрипте прибавляется только единичка, а дальше подсчет не идет. Усовершенствуем\n        нашу программу мы уже в следующем уроке. Нам предстоит поговорить о других интересных вещах.\n    </p>\n"
  },
  {
    "_id": {
      "$oid": "6481c2565299bc01bb788b12"
    },
    "lessonNumber": 2,
    "content": "<div class=\"lead\">\n            <h2 class=\"text-center my-5\">Переменные</h2>\n\n            <p>Что такое переменные? Если вы уже знакомы с программированием, то для вас не должно быть новым понятие\n                переменная. Но все же давайте повторим или узнаем что это такое)</p>\n\n            <p>Переменная – это «именованное хранилище» для данных. В переменной можно хранить разную информацию. Можно\n                хранить количество овечек в счетчике или максимальную стоимость куртки в интернет-магазине.</p>\n\n            <p>В JavaScript можно создать два вида переменных:</p>\n\n            <ul>\n                <li>с помощью let создаются изменяемые переменные;</li>\n                <li>с помощью const создаются постоянные переменные, которые перезаписывать нельзя их еще называют\n                    константы.</li>\n                <li>с помощью var создаются глобальные переменные (но лучше их не создавать ;))</li>\n            </ul>\n\n            <p><code>const allCandies = 10; // будет хранить в себе число 10 неизменно</code></p>\n\n            <p><code>let candy; // переменную можно будет изменять&nbsp;</code></p>\n\n            <p><code>candy = 1;</code></p>\n\n            <p><code>candy = 20;</code></p>\n\n            <p>Ограничения именования переменных</p>\n\n            <ul>\n                <li>Первый символ не должен быть цифрой.</li>\n                <li>Имя переменной должно содержать только буквы, цифры или\n                    символы&nbsp;<code>$</code>&nbsp;и&nbsp;<code>_</code>.</li>\n            </ul>\n\n            <p>Советы по именованию переменных:</p>\n\n            <ul>\n                <li>Старайтесь не называть&nbsp;переменные одной буквой или бессмысленным сочетанием букв (a, b, abc), у\n                    переменной должно быть осмысленное название, чтобы ваш код был читаем;</li>\n                <li>Старайтесь давать переменными максимально описательные именования. К примеру userCart или passwordValue;\n                </li>\n                <li>придерживайтесь одного стиля и не забывайте про ограничения.</li>\n            </ul>\n\n            <p>Теперь когда мы поговорили о переменных можно перейти и к типам даных.</p>\n\n            <p style=\"text-align: center;\"><img alt=\"\" height=\"182\" name=\"cat-smile.png\"\n                    src=\"https://ucarecdn.com/eafcdb60-cd20-412c-8d66-665af2648770/\" width=\"272\"></p>\n\n            <h2 class=\"text-center my-5\">Типы данных</h2>\n\n            <p>Всего в JS есть восемь основных типов данных:</p>\n\n            <ol>\n                <li>Number</li>\n                <li>BigInt</li>\n                <li>String</li>\n                <li>Boolean</li>\n                <li>Null</li>\n                <li>Undefined</li>\n                <li>Object</li>\n                <li>Symbol</li>\n            </ol>\n\n            <p>Мы коротко разберем каждый из них и приступим к реализации нашей программы)</p>\n            <h3 class=\"text-center my-5\">Number</h3>\n\n            <p>Числовой тип данных. В JS целые и дробные числа представлены типом данных Number. При числовых операциях вы\n                можете получить неточное (округлённое) значение. В дополнение к возможности представлять числа с плавающей\n                запятой, есть несколько символических значений:&nbsp;+Infinity(положительная бесконечность),&nbsp;-Infinity\n                (отрицательная бесконечность), и&nbsp;NaN (не число).</p>\n\n            <p><code>const firstNum = 1;<br>\n                                                                const secondNum = 10.5;</code></p>\n\n            <h3 class=\"text-center my-5\">\n                BigInt</h3>\n\n            <p>Тип&nbsp;BigInt&nbsp;был добавлен в JavaScript, чтобы дать возможность работать с целыми числами\n                произвольной длины. С помощью этого типа данных можно работать с числами, которые Number надежно\n                представить не может. Максимальное значение типа данных Number можно получить, обратившись\n                к&nbsp;<code>Number.MAX_SAFE_INTEGER</code>.</p>\n\n            <p>Чтобы создать значение типа&nbsp;BigInt, необходимо добавить&nbsp;n&nbsp;в конец числового литерала:</p>\n\n            <p><code>const bigInt = 12345324784843247384387827484784787847n;</code></p>\n\n            <h3 class=\"text-center my-5\">String</h3>\n\n            <p>В JavaScript для представления текстовых данных служит тип&nbsp;String. Он представляет собой цепочку\n                «элементов» 16-битных беззнаковых целочисленных значений. Каждый такой элемент занимает свою позицию в\n                строке. Первый элемент имеет индекс 0, следующий — 1, и так далее. Длина строки — это количество\n                элементов в ней.</p>\n\n            <p><code>const myString = \"Hi! My name is Sasha\"</code></p>\n\n            <h3 class=\"text-center my-5\">Boolean</h3>\n\n            <p>У него всего два значения:&nbsp;true (истина) и&nbsp;false (ложь). С помощью них можно проверять верность\n                какого-либо условия. Об этом подробнее вы узнаете в уроке про условные операторы.</p>\n\n            <h3 class=\"text-center my-5\">Null</h3>\n\n            <p>Это просто специальное значение, которое имеет смысл «ничего» или «значение неизвестно».</p>\n\n            <h3 class=\"text-center my-5\">Undefined</h3>\n\n            <p>Переменная, которой не было присвоено значение, будет иметь значение&nbsp;undefined. То есть если мы\n                создадим переменную и не присвоим ей ничего, то по дефолту это значение будет undefined</p>\n\n            <p><code>let a;</code></p>\n\n            <p><code>console.log(a) // undefined</code></p>\n\n            <h3 class=\"text-center my-5\">Symbol</h3>\n\n            <p>«Символ» представляет собой уникальный идентификатор. Про этот тип данных в курсе рассказано совсем\n                немного, так как его изучение это уже более глубокое изучение языка. Вы можете провести собственное\n                исследование и посмотреть подробное описание данного типа в полезных источниках, которые были\n                представлены вначале модуля.</p>\n\n            <p><code>const mySymbol = new Symbol();</code></p>\n\n            <h3 class=\"text-center my-5\">Object</h3>\n\n            <p>Первые 7 типов называют&nbsp;«примитивными».</p>\n\n            <p>Объект JavaScript — это таблица соотношений между ключами и значениями. Ключи — это строки\n                (или&nbsp;Symbol), а значения могут быть любыми. Более подробно про этот тип данных (или даже если\n                точнее сказать структуру данных) мы поговорим во втором модуле.</p>\n\n            <p><code>const myObject = {\"first\": 1, \"second\": 2}</code></p>\n\n            <p><code>myObject.first // 1<br>\n                            myObject[\"first\"] // 1</code></p>\n\n            <p class=\"mt-5\">Чтобы определить тип, к примеру, переменной, существует оператор typeof</p>\n\n            <p><code>const param = 10</code></p>\n\n            <p><code>typeof param // 'number'</code></p>\n\n            <p><code>const str = \"Hello World!!\"</code></p>\n\n            <p><code>typeof str // 'string'&nbsp;</code></p>\n\n            <p><code>typeof {} // 'object'</code></p>\n\n            <p class=\"mt-5\">Вот мы и познакомились немного с типами и переменными в JavaScript. теперь можем приступить к реализации\n                алгоритма</p>\n\n            <p style=\"text-align: center;\"><img alt=\"\" height=\"156\" name=\"computer-cat.jpeg\"\n                    src=\"https://ucarecdn.com/602bd042-926d-49b9-a794-de26f3093dd9/\" width=\"207\"></p>\n\n            <p>Для начала вспомним что у нас уже есть</p>\n\n            <p><code>document.querySelector(\".counter-button\").addEventListener(\"click\", (e) =&gt; {<br>\n        &nbsp; &nbsp; &nbsp; document.querySelector(\".counter\").textContent = \"1\"<br>\n        })</code></p>\n\n            <p>Чтобы при каждом щелчке прибавлялась одна овечка нам нужно где-то хранить изменение количества овечек. И\n                вот как раз для этого нам и нужна изменяемая переменная. Назовем ее sheepsSum. И изначально ее значение\n                будет ноль, так как овечек пока нет</p>\n\n            <p><code>let sheepsSum = 0</code></p>\n\n            <p>Теперь нам нужно при каждом клике менять количество овечек на единицу. И тут все довольно просто. Во\n                время события клика мы просто будем прибавлять к значению в переменной sheepsSum единицу. Осталось\n                только теперь изменять textContent не просто на “1”, а на значение переменной sheepsSum</p>\n\n            <p><code>let sheepsSum = 0<br>\n        document.querySelector(\".counter-button\").addEventListener(\"click\", (e) =&gt; {<br>\n        &nbsp; &nbsp; &nbsp; sheepsSum += 1<br>\n        &nbsp; &nbsp; &nbsp;document.querySelector(\".counter\").textContent = sheepsSum<br>\n        })</code></p>\n\n            <p>И вот она происходит магия. Теперь у нас есть счетчик овечек!</p>\n\n            <p><img alt=\"\" height=\"184\" name=\"magic_cat.jpeg\"\n                    src=\"https://ucarecdn.com/c9dde5f8-aa35-42a7-8e25-9e15a797b050/\" width=\"300\"></p>\n\n        </div>",
    "isPassed": false
  },

{
    "_id": {
      "$oid": "6481c2565299bc01bb788b13"
    },
    "lessonNumber": 3,
    "content": "<h2 class=\"text-center my-5\">Операторы сравнения</h2>\n\n    <p class=\"lead\">Перед тем как говорить про условные операторы, стоит разобраться что же такое операторы\n        сравнения.</p>\n\n    <p class=\"lead\">Операторы сравнения возвращают или <code>true</code>, или <code>false</code> (помните мы\n        говорили про тип\n        данных Boolean, вот он нам и пригодился) в зависимости от того истинно ли сравнение или нет. То есть\n        <code>1 &gt; 2</code> вернет <code>false</code>\n    </p>\n\n    <ul class=\"lead\">\n        <li>Равенство <code>==</code></li>\n        <li>Строгое равенство <code>===</code></li>\n        <li><code>Object.is</code></li>\n        <li>больше, меньше <code>&gt; &lt;</code></li>\n        <li>больше или равно, меньше или равно <code>&gt;= &lt;=</code></li>\n    </ul>\n\n    <h3 class=\"text-center my-5\">Различие строгого равенства и равенства:</h3>\n\n    <p class=\"lead\">Строгое равенство не приводит типы перед сравнением и соответсвенно ”0” и 0 не будут равны. А\n        вот оператор ==\n        приводит, и поэтому при сравнении 0 == \"0\" вернется true.</p>\n\n    <p class=\"lead\">Отдельное внимание хочу выделить оператору Object.is</p>\n\n    <p class=\"lead\">Object.is ведёт себя так же, как и тройное равно, но со специальной обработкой\n        для&nbsp;NaN,&nbsp;-0\n        и&nbsp;+0, возвращая&nbsp;false при сравнении&nbsp;-0&nbsp;и&nbsp;+0, и&nbsp;true&nbsp;для\n        операции&nbsp;Object.is(NaN, NaN)</p>\n\n    <h3 class=\"text-center my-5\">Логические операторы</h3>\n\n    <p class=\"lead\">Еще одно важное понятие это логические операции. С помощью них можно писать сложные условия</p>\n\n    <ul class=\"lead\">\n        <li>ИЛИ ||</li>\n        <li>И &amp;&amp;</li>\n        <li>НЕ !</li>\n    </ul>\n\n    <h3 class=\"text-center my-5\">ИЛИ</h3>\n\n    <p class=\"lead\">Оператор ИЛИ в JavaScript может принимать в качестве аргументов не только true и false. Для начала\n        посмотрим, что\n        этот оператор возвращает, работая с логическими аргументами.</p>\n\n    <p class=\"lead\"><code>true || true // true<br>\n        true || false // true<br>\n        false || true // true<br>\n        false || false // false&nbsp;</code></p>\n\n    <p class=\"lead\">Если значение не логического типа, то оно к нему приводится в целях вычислений.</p>\n\n    <p class=\"lead\">Например, число&nbsp;1&nbsp;будет воспринято как&nbsp;true, а&nbsp;0&nbsp;– как&nbsp;false</p>\n\n    <p class=\"lead\">НО</p>\n\n    <p class=\"lead\">в JavaScript есть расширенные возможности этого оператора к примеру</p>\n\n    <p class=\"lead\">Давайте посмотрим чем в итоге станет result после выполнения кода ниже</p>\n\n    <p class=\"lead\"><code>result = false || 30 || \"hi\"</code></p>\n\n    <p class=\"lead\">Для этого нужно понять как в JS оператор || используется с несколькими аргументами:</p>\n\n    <ul class=\"lead\">\n        <li>Вычисляет аргументы слева направо.</li>\n        <li>Каждый аргумент конвертирует в логическое значение. Если результат&nbsp;true, останавливается и возвращает\n            исходное значение этого аргумента.</li>\n        <li>Если все аргументы являются ложными (false), возвращает последний из них.</li>\n    </ul>\n\n    <p class=\"lead\">Теперь давайте разберем по шагам пример сверху:</p>\n\n    <p class=\"lead\">- Первое значение <code>false</code>&nbsp;- переходим дальше&nbsp;</p>\n\n    <p class=\"lead\">- Второе значение преобразуется JS&nbsp; в <code>true</code>&nbsp;, соответственно на этом оператор\n        останавливается и возвращает его исходное значение <code>30</code></p>\n\n    <p class=\"lead\">И соответственно проанализировав все пункты, result будет равен 30, так как первый аргумент ложный,\n        второй\n        истинный (JS преобразовал его в true), и соответственно до третьего мы не дошли</p>\n<span class=\"lead\">\n        <h3 class=\"text-center my-5\">И</h3>\n\n        <p>Так же как и оператор ИЛИ, оператор И в языке javaScript может принимать не только логические значения, но для\n            понимания оператора сначала рассмотрим, как он работает с булевыми значениями</p>\n\n        <p><code>true &amp;&amp; true // true<br>\n    true &amp;&amp; false // false&nbsp;<br>\n    false &amp;&amp; true // false&nbsp;<br>\n    false &amp;&amp; false // false</code></p>\n\n        <p>Давайте теперь рассмотрим как оператор И будет вести себя со значениями другого типа на той же переменной result\n        </p>\n\n        <p><code>result = 30 &amp;&amp; undefined &amp;&amp; \"hi\"</code></p>\n\n        <p>Оператор&nbsp;&amp;&amp;&nbsp;выполняет следующие действия:</p>\n\n        <ul>\n            <li>Вычисляет аргументы слева направо.</li>\n            <li>Каждый операнд преобразует в логическое значение. Если результат&nbsp;false, останавливается и возвращает\n                исходное значение этого аргумента.</li>\n            <li>Если все аргументы были истинными, возвращается последний.</li>\n        </ul>\n\n    <p>Теперь понятно, что result будет равен undefined (JS преобразовывает undefined, 0, null, NaN, “” в false)</p>\n<h3 class=\"text-center my-5\">НЕ</h3>\n\n<p>И остался последний (из базовых) логических операторов - оператор НЕ. Он также в JavaScript принимает не только логические значения. Суть этого оператора довольна проста, он берет значение аргумента (если это не логическое значение то преобразовывает в логическое) и возвращает обратное. То есть !true будет false.</p>\n\n<p>Давайте рассмотрим пару примеров</p>\n\n<p><code>!true // false&nbsp;<br>\n!undefined // true<br>\n!\"hi\" // false&nbsp;</code></p></span>",
    "isPassed": false
  },
  {
    "_id": {
      "$oid": "6481c2565299bc01bb788b24"
    },
    "lessonNumber": 4,
    "content": "<div class=\"lead\">\n        <h2 class=\"text-center my-5\">Условные операторы</h2>\n\n        <p>И наконец мы перешли к условным ветвлениям!</p>\n\n        <p style=\"text-align: center;\"><img alt=\"\" height=\"249\" name=\"happy-cat.jpeg\"\n                src=\"https://ucarecdn.com/cc97acce-86fd-49ed-b74a-003579efe89d/\" width=\"139\"></p>\n\n        <ul>\n            <li>оператор if … else</li>\n            <li>тернарный оператор</li>\n        </ul>\n        <h3 class=\"text-center my-5\">IF .. ELSE</h3>\n\n        <p>Условные ветвления нужны для проверки условий. Давайте рассмотрим на примере</p>\n\n        <p><code>let num = 5;<br>\n                        if (num &gt; 0) {<br>\n                        &nbsp; &nbsp; num = -10;<br>\n                        } else {<br>\n                        &nbsp; &nbsp; num = 5&nbsp;<br>\n                        }&nbsp;</code></p>\n\n        <p>В результате выполнения этого скрипта <code><span style=\"color: #000000;\">num</span></code>&nbsp;будет равен\n            <code>-10</code>.\n        </p>\n\n        <p>Как вы видите, если условие внутри оператора <code>if</code> равно true ( а мы с вами уже прошли и операторы\n            сравнения и булевы значения), то выполняется все то, что внутри (тело оператора <code>if</code>).</p>\n\n        <p>А если равно <code>false</code>, то или ничего не выполняется, или выполняется то, что внутри тела\n            <code>else</code>.\n        </p>\n\n        <p>Теперь вы и сами сможете сказать чему в итоге была бы равна <code>num</code>, если бы изначально она была бы\n            меньше нуля)</p>\n        <h3 class=\"text-center my-5\">Тернарный оператор</h3>\n\n        <p>О нем мы поговорим коротко. Я сразу же приведу пример, чтобы стало понятно, что это такое.</p>\n\n        <p><code>let isAllowed = (age &gt; 18) ?&nbsp;\"Вы можете пройти\"&nbsp;: \"вы слишком молоды!\";</code></p>\n\n        <p>Итак у нас есть переменная age и если она больше 18, то переменной isAllowed присвоится значение true, иначе\n            false. Это можно сказать сокращенная запись if .. else. Но тернарный оператор в отличие от обычного if .. else\n            всегда что-то возвращает.<br>\n            &nbsp;</p>\n\n        <p>Итак наконец вернемся к нашей маленькой программе подсчета овечек. В результате выполнения домашнего задания\n            у вас должен был получится примерно такой код:</p>\n\n        <p><code>let sheepsSum = 0<br>\n        document.querySelector(\".counter-button-plus\").addEventListener(\"click\", (e) =&gt; {<br>\n        &nbsp;&nbsp; &nbsp; &nbsp;sheepsSum += 1<br>\n        &nbsp; &nbsp; document.querySelector(\".counter\").textContent = sheepsSum<br>\n        });</code></p>\n\n        <p><code>document.querySelector(\".counter-button-minus\").addEventListener(\"click\", (e) =&gt; {<br>\n        &nbsp;&nbsp; &nbsp; &nbsp;sheepsSum -= 1<br>\n        &nbsp; &nbsp; document.querySelector(\".counter\").textContent = sheepsSum<br>\n        });</code></p>\n\n        <p>Но проблема лишь в том, что теперь вычитая овечек мы можем перейти границу нуля, и число овечек станет\n            отрицательным. Но так не бывает в реальной жизни, поэтому давайте это исправим. Напишем условие, которое\n            будет проверять не перешло ли количество овечек нулевой порог.</p>\n\n        <p><code>let sheepsSum = 0<br>\n        document.querySelector(\".counter-button-plus\").addEventListener(\"click\", (e) =&gt; {<br>\n        &nbsp;&nbsp; &nbsp; &nbsp;sheepsSum += 1;<br>\n        &nbsp; &nbsp; document.querySelector(\".counter\").textContent = sheepsSum;<br>\n        });</code></p>\n\n        <p><code>document.querySelector(\".counter-button-minus\").addEventListener(\"click\", (e) =&gt; {<br>\n        &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if (sheepsSum &gt; 0) {<br>\n        &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;sheepsSum -= 1;<br>\n        &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;document.querySelector(\".counter\").textContent = sheepsSum;<br>\n        &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br>\n        }</code>&nbsp;</p>\n\n        <p>И вот теперь овечек никогда не станет меньше нуля)</p>\n\n    </div>",
    "isPassed": false
  },
  {
    "_id": {
      "$oid": "6481c2565299bc01bb788b25"
    },
    "lessonNumber": 5,
    "content": "<div class=\"lead pt-5\">\n        <p>В этом уроке мы поговорим о таком важном понятии как функции. Случается так, что в программе приходится повторять\n            один и тот же кусок кода. Для того чтобы не копировать несколько раз одно и то же, придумали функции. Давайте\n            рассмотрим на примере.</p>\n\n        <p><code>function sum (a, b) {<br>\n                                                &nbsp; &nbsp; return a + b<br>\n                                                }</code></p>\n\n        <p><code>sum(1, 2) // 3<br>\n                                                sum(3, 7) // 10</code></p>\n\n        <p>Объявляется функция с помощью ключевого слова function, потом идет ее название, потом в круглых скобках параметры\n            (если параметров нет, то скобки остаются пустыми) и в фигурных скобках уже тело самой функции.</p>\n\n        <p>По названию функции ее можно вызвать несколько раз. Как это показано в нашем примере с функцией <code>sum</code>\n        </p>\n\n        <p><img alt=\"\" height=\"260\" name=\"cat-glasses.webp\" src=\"https://ucarecdn.com/8a372875-52ac-4b66-813e-036d230d2e00/\"\n                width=\"232\"></p>\n\n        <p>Давайте рассмотрим еще один пример</p>\n\n        <p><code>let sum = 0;</code></p>\n\n        <p><code>function summarize () {<br>\n                                                &nbsp; &nbsp; &nbsp;const a = 1;<br>\n                                                &nbsp; &nbsp; &nbsp;const b = 3;<br>\n                                                &nbsp; &nbsp; &nbsp;sum = a + b;<br>\n                                                &nbsp; &nbsp; &nbsp;return sum<br>\n                                                }</code></p>\n\n        <p><code>summarize() // 4</code></p>\n\n        <p>Переменная sum создана вне функции и поэтому ее можно использовать и внутри функции. Но вот переменные a и b\n            созданы внутри и поэтому могут использоваться только внутри самой функции. Если вы попытаетесь изменить их вне\n            функции, то будет ошибка, так как вне функции они не видны и использоваться не могут.</p>\n\n        <p><em>Если одноимённая переменная объявляется внутри функции, тогда она перекрывает внешнюю.</em></p>\n\n        <p>Глобальными называются переменные, которые объявлены вне всех функций. Они находятся в области видимости всех\n            функций.</p>\n        <h2 class=\"text-center my-5\">Возврат значения</h2>\n\n        <p>Вы наверное заметили, что в наших функциях используется ключевое слово return. Оно нужно для того чтобы\n            обозначить,\n            что возвращает функция. После return функция прекращает свое выполнение. Вернувшееся значение мы можем присвоить\n            какой-либо переменной или вывести в консоль к примеру.</p>\n\n        <p><code>function sum (a, b) {<br>\n                                        &nbsp; &nbsp; return a + b<br>\n                                        }</code></p>\n\n        <p><code>console.log(sum(1,2)) // выведет 3</code></p>\n\n        <p>Вы можете написать функцию , у которой нет return, и тогда, по умолчанию, она будет возвращать undefined.</p>\n\n        <p><code>function showName (name) {<br>\n                                        &nbsp; &nbsp; console.log(name);<br>\n                                        }</code></p>\n\n        <p><code>showName(\"Марина\");</code></p>\n\n        <p>Функция showName в данном случае ничего не возвращает, но она нужна чтобы логировать переданное ей имя. Так что\n            вы\n            можете использовать и такие функции, в зависимости от того, что вам надо реализовать.</p>\n\n\n\n        <h2 class=\"text-center my-5\">Стрелочные функции</h2>\n\n        <p>Поговорим немного и про стрелочный функции. Давайте рассмотрим на примере сразу как она задается:</p>\n\n        <p><code>const func = () =&gt; 3 + 4</code></p>\n\n        <p><code>func() // Вернет цифру 7</code></p>\n\n        <p><code>const funcWithArguments = (firstArg, secondArg) =&gt; firstArg + secondArg</code></p>\n\n        <p><code>funcWithArguments(3, 4) // Вернет цифру 7</code></p>\n\n        <p><code>const sumNumbers = () =&gt; {<br>\n                                &nbsp;&nbsp; &nbsp;let a = 3<br>\n                                &nbsp;&nbsp; &nbsp;let b = 4<br>\n                                &nbsp;&nbsp; &nbsp;return a + b&nbsp;<br>\n                                }</code></p>\n\n        <p><code>sumNumbers() // Вернет цифру 7</code></p>\n\n        <p>Как вы видите, если вы сможете записать то, что вам надо вернуть в одно выражение, синтаксис становится очень\n            прост и лаконичен.</p>\n\n        <p>Советы по именованию функций:</p>\n\n        <ul>\n            <li>Это должно быть лаконичное и хорошо описывающее, что делает функция, название</li>\n            <li>Обычно это глагол или название начинается с глагола, так как функция это действие</li>\n        </ul>\n\n        <p style=\"text-align: center;\"><img alt=\"\" height=\"340\" name=\"cat-strange.jpeg\"\n                src=\"https://ucarecdn.com/4fbc4cba-09ba-40d6-9ab3-12040183da04/\" width=\"340\"></p>\n\n        <h2 class=\"text-center my-5\">Функции высшего порядка</h2>\n\n        <p>Давайте еще более подробно поговорим о функциях. Функции в JS - это объекты, то есть функции могут в качестве\n            аргументов принимать функции. То есть</p>\n\n        <p><span style=\"color: #000000;\"><code>func a () { ... }&nbsp;</code><br>\n                <code>func b (a) { a() }</code></span></p>\n\n        <p>Так вот функция&nbsp;<code>b()</code> - называется функцией высшего порядка, так как в качестве аргументов ей\n            передали другую функцию.</p>\n\n        <p>Так же если бы функция <code>a()</code> возвращала бы функцию <code>b()</code>, она также была бы функцией\n            высшего порядка.&nbsp;</p>\n\n        <p>Итого, функция высшего порядка должна соответствовать одному из этих условий:</p>\n\n        <p>1) Может принимать&nbsp; в качестве аргумента, другую функцию;</p>\n\n        <p>2) Может возвращать функцию.</p>\n\n        <p>В уроке про массивы вы увидите пример функций высшего порядка, так как некоторые методы массивов принимают в\n            качестве аргументов другие функции.</p>\n\n        <h2 class=\"text-center my-5\">Коллбэки (callbacks)</h2>\n\n        <p>Мы поговорили про функции высшего порядка и теперь можно говорить про Коллбэки.</p>\n\n        <p>Коллбэк - это функция, переданная в другую функцию в качестве аргумента, которая затем вызывается по\n            завершению какого-либо действия.</p>\n\n        <p>Вы помните из прошлого шага, что функциями высшего порядка называются функции, которым можно передавать\n            другие функции в качестве аргумента. Так вот те функции, что мы передаем в качестве аргумента, и есть\n            <code>callback</code>.\n        </p>\n\n        <p>Давайте подробнее разберем зачем нужны Коллбэки.</p>\n\n        <p>В JS если мы напишем вот такой код&nbsp;</p>\n\n        <p><code>function a () { console.log(\"hi\") }</code></p>\n\n        <p><span style=\"color: #000000;\"><code>function b () { console.log(\"bye\") }</code></span></p>\n\n        <p><code><span style=\"color: #000000;\">a()</span></code></p>\n\n        <p><code><span style=\"color: #000000;\">b()</span></code></p>\n\n        <p>Выполнится сначала функция <code>а()</code> и в консоль выведется <code>hi</code>, а потом функция\n            <code>b()</code> и в консоль выведется <code>bye</code>.\n        </p>\n\n        <p>И все выполняется по порядку, но представим у нас есть функция, которая выполнится не сразу, а только через 2\n            секунды и тогда следующая по порядку функция дожидаться ее не будет и выполнится сразу. То есть сначала\n            выполнится функция <code>b()</code>, у которой нет задержки, а потом функция <code>a(),</code> у которой\n            задержка 2 секунды.</p>\n\n        <p>Но мы так не хотим, мы хотим чтобы функция <code>b()</code> выполнилась после выполнения функции\n            <code>a()</code>!\n        </p>\n\n        <p>Для того чтобы все произошло как мы хотим, мы создадим функцию высшего порядка <code>a()</code> и в нее\n            передадим <code>callback</code>&nbsp;<code>b()</code>.</p>\n\n        <p><code>function a (b) {</code></p>\n\n        <p><code>&nbsp; setTimeout(() =&gt; console.log(\"hi after 2 sec\"), 2000);</code></p>\n\n        <p><code>&nbsp; b();</code></p>\n\n        <p><code>}</code></p>\n\n        <p><code>function b () {</code></p>\n\n        <p><code>&nbsp; console.log(\"bye after hi\")</code></p>\n\n        <p><code>}</code></p>\n\n        <p>И вот теперь функция <code>b()</code> выполнится строго тогда, когда мы захотим</p>\n\n</div>",
    "isPassed": false
  }
]